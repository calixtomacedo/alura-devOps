06.Trabalhando com o Docker Compose

docker-compose.yml

version: '3.8'

service:

  nginx:
    build:
      dockerfile: ./docker/nginx.dockerfile
      context: .
    image: douglasq/nginx
    container_name: nginx
    ports:
      - "80:80"
    network:
      - production-networ
    depends_on:
      - "node1"
      - "node2"
      - "node3"

  mongodb:
    image: mongo
    network:
      - production-network

  node1:
    build:
      dockerfile: ./docker/alura-books.doclerfile
      context: .
    image: douglasq/alura-books
    container_name: alura-books-1
    ports:
      - "3000"
    network:
      - production-network
    depends_on:
      - "mongodb"

  node2:
    build:
      dockerfile: ./docker/alura-books.doclerfile
      context: .
    image: douglasq/alura-books
    container_name: alura-books-2
    ports:
      - "3000"
    network:
      - production-network
    depends_on:
      - "mongodb"

  node3:
    build:
      dockerfile: ./docker/alura-books.doclerfile
      context: .
    image: douglasq/alura-books
    container_name: alura-books-3
    ports:
      - "3000"
    network:
      - production-network
    depends_on:
      - "mongodb"

network:
  production-network:
    driver: bridge
    
    
buildar o docker-compose
 
docker-compose build

subindo tudo
docker-compose up

pra não travar o console
docker-compose up -d
docker ps

Ver o estado do container
docker-compose ps

Parar e remover os containers
docker-compose down

E não é por que eles são serviços, que eles não tem um container por debaixo dos panos, então nós conseguimos interagir com os containers utilizando todos os comandos que já vimos no treinamento, por exemplo para testar a comunicação entre eles:
docker exec -it alura-books-1 ping alura-books-2

Reinicializando containers
docker-compose down
docker-compose up


