https://www.vagrantup.com/docs/provisioning/ansible

instalação 
https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html
https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu


Prepararemos nossa máquina virtual para receber o Ansible.

Garanta que nenhuma esteja rodando ao verificar com vagrant status no terminal.

Vá ao final do documento "Vagrantfile" no editor de texto para criarmos uma nova MV, reconfigurarmos o MySQL Server e instalarmos o Ansible e suas redes com IP diferentes.

Devemos utilizar o Shell para instalar o Ansible, visto que este não é recebido automaticamente. Clique neste endereço para acessar o link "Latest Releases via Apt (Ubuntu)" e copiar as quatro linhas de código apresentadas que devem ser introduzidas na sequência.

    config.vm.define "mysqlserver" do |mysqlserver|
        mysqlserver.vm.network "public_network", ip: "192.168.1.22"
    end

    config.vm.define "ansible" do |ansible|
        ansible.vm.network "public_network", ip: "192.168.1.26"
        ansible.vm.provision "shell",
            inline: "apt-get update && \
                     apt-get install -y software-properties-common && \
                     apt-add-repository --yes --update ppa:ansible/ansible && \
                     apt-get install -y ansible"
    end
endCOPIAR CÓDIGO
Testamos as alterações com vagrant validate seguido de vagrant status para visualizar as quatro máquinas virtuais e ativar com vagrant up ansible.

Acessamos a máquina em execução com vagrant ssh ansible e a visualizamos com ansible-playbook --version.

Agora no "Vagrantfile", passamos os passos de instalação pelo arquivo "playbook.yml" que envia comandos à MV a ser configurada com chave privada para instalar o MySQL Server com chave pública através da conexão SSH entre estas. Para isso, obtemos:

    config.vm.define "mysqlserver" do |mysqlserver|
        mysqlserver.vm.network "public_network", ip: "192.168.1.22"

        mysqlserver.vm.provision "shell",
            inline: "cat /vagrant/configs/id_bionic.pub >> .ssh/authorized_keys"
    endCOPIAR CÓDIGO
Saia com exit, execute a máquina do MySQL Server com vagrant up mysqlserver e observe os resultados se conectando com vagrant ssh mysqlserver.

Como já temos a chave pública em MySQL Server, precisamos adicionar e copiar a chave privada id_bionic para habilitar a chamada do Ansible. Também mudamos a permissão para apenas o usuário do arquivo no "Vagrantfile", adicione:

config.vm.define "ansible" do |ansible|
    ansible.vm.network "public_network", ip: "192.168.1.26"

    ansible.vm.provision "shell",
        inline: "cp /vagrant/id_bionic  /home/vagrant && \
                chmod 600 /home/vagrant/id_bionic"COPIAR CÓDIGO
Testamos com vagrant provision ansible e conectamos com vagrant ssh ansible. Assim, preparamos a máquina virtual, instalamos o Ansible, colocamos a chave privada à sua disposição e preparamos a MV para o MySQL Server.

Falta-nos apenas executar o "playbook.yml" para fazer todas as configurações necessárias.



Neste passo, nosso objetivo é testar o Ansible.

Dentro de "bionic/configs", crie uma nova pasta no editor de texto com o nome "ansible". Nesta, crie um novo arquivo chamado "hosts" que define qual máquina será configurada com uma lista de IP's e algumas configurações de usuário, conexão, chave privada, permissões e padrão Python.

[mysqlserver]
192.168.1.22

[mysqlserver:vars]
ansible_user=vagrant
ansible_ssh_private_key_file=/home/vagrant/id_bionic
ansible_python_interpreter=/usr/bin/python3
ansible_ssh_common_args='-o StrictHostKeyChecking=no'COPIAR CÓDIGO
Salvo este inventário, sabemos qual máquina acessar e como fazê-lo. Agora podemos definir os passos de instalação no novo arquivo "playbook.yml" dentro do mesmo diretório anterior.

- hosts: all
  handlers:
    - name: restart mysql
      service:
        name: mysql
        state: restarted
      become: yes

  tasks:
    - name: 'Instalar MySQL Server'
      apt:
        update_cache: yes
        cache_valid_time: 3600 #1 hora
        name: ["mysql-server-5.7", "python3-mysqldb"]
        state: latest
      become: yes

    - name: 'Criar usuario no MySQL'
      mysql_user:
        login_user: root
        name: phpuser
        password: pass
        priv: '*.*:ALL'
        host: '%'
        state: present
      become: yes

    - name: 'Copiar arquivo mysqld.cnf'
      copy:
        src: /vagrant/configs/mysqld.cnf
        dest: /etc/mysql/mysql.conf.d/mysqld.cnf
        owner: root
        group: root
        mode: 0644
      become: yes
      notify:
        - restart mysqlCOPIAR CÓDIGO
Caso queira aprofundar seus conhecimentos em Ansible, recomendamos os cursos da Plataforma Alura acessíveis aqui. No terminal, testamos a instalação escrevendo vagrant ssh ansible seguido de ansible-playbook -i /vagrant/configs/ansible/hosts /vagrant/configs/ansible/playbook.yml'.

Um erro é apresentado indicando que não foi possível se conectar com o IP terminado em 22. Observamos que ao digitar ls -al a saída aponta que a chave id_bionic é acessível ao usuário root, sendo necessárias alterações no script.

Realizamos esta mudança com sudo chown vagrant:vagrant id_bionic e verificamos novamente com ls -al para atestar a alteração. Copie este penúltimo comando para o "Vagrantfile":

        ansible.vm.provision "shell",
            inline: "cp /vagrant/indbionic /home/vagrant && \
                     chmod 600 /home/vagrant/id_bionic && \
                     chown vagrant:vagrant /home/vagrant/id_bionic"COPIAR CÓDIGO
Instale o Ansible inserindo ansible-playbook -i /vagrant/configs/ansible/hosts /vagrant/configs/ansible/playbook.yml no terminal. Repare que as saídas apresentam as tarefas que estabelecemos e as alterações de IP no "playbook.yml".

Portanto, a partir de nossa máquina virtual podemos controlar o MySQL Server. No próximo passo, faremos a integração do comando no "Vagrantfile" para automatizar a execução.

vagrant ssh ansible
ansible-playbook -i /vagrant/configs/ansible/hosts /vagrant/configs/ansible/playbook.yml